class Solution {
public:
    vector<string> wordBreak(string s, unordered_set<string> &dict) {
        int length = s.size();
        int dp[length+1];
        memset(dp, 0, (length+1)*sizeof(int));
        dp[0] = 1;
        for(int i=0;i<length;i++)
        {
            if(dp[i] == 0)
                continue;
            for(int j=1;j<=length-i;j++)
            {
                string tmp = s.substr(i,j);
                if(dict.count(tmp))
                    dp[i+j] = 1;
            }
        }
        vector<string> vec;
        dfs(vec, s, dp, length, "", dict);
        return vec;
    }
    
    void dfs(vector<string> & vec, string str, int * dp, int index, string last, unordered_set<string> &dict)
    {
        if(index == 0)
        {
            vec.push_back(last.substr(1, last.size()-1));
            return;
        }
        for(int i=index-1;i>=0;i--)
        {
            string tmp = str.substr(i, index-i);
            if(dp[i] && dict.count(tmp))
            {
                dfs(vec, str, dp, i, " " + tmp + last, dict);
            }
        }
    }
};
